diff -u ./src/network-mysqld-packet.c.orig ./src/network-mysqld-packet.c
--- ./src/network-mysqld-packet.c.orig	2018-07-03 10:39:50.652056150 -0700
+++ ./src/network-mysqld-packet.c	2018-07-04 10:41:46.678116054 -0700
@@ -38,6 +38,20 @@
 #define C(x) x, sizeof(x) - 1
 #define S(x) x->str, x->len
 
+/* MariaDB messes with MySQL macros in strange ways, define it here instead */
+#ifndef CLIENT_DEPRECATE_EOF
+#define CLIENT_DEPRECATE_EOF (1ULL << 24)
+#endif
+
+/* TRUE if capabilities have CLIENT_DEPRECATE_EOF set. Normally it should be enough to check only
+ * client capabilities but there are cases when client sets its flag even if server does not
+ * announce that capability (see bug #91533).
+ */
+#define DEPRECATE_EOF(con) (con->client->response->client_capabilities & \
+							con->client->response->server_capabilities & \
+							CLIENT_DEPRECATE_EOF)
+
+
 network_mysqld_com_query_result_t *network_mysqld_com_query_result_new() {
 	network_mysqld_com_query_result_t *com_query;
 
@@ -69,7 +83,7 @@
  *         0  on success and done
  *         1  on success and need more
  */
-int network_mysqld_proto_get_com_query_result(network_packet *packet, network_mysqld_com_query_result_t *query, gboolean use_binary_row_data) {
+int network_mysqld_proto_get_com_query_result(network_packet *packet, network_mysqld_com_query_result_t *query, gboolean use_binary_row_data, gboolean deprecate_eof) {
 	int is_finished = 0;
 	guint8 status;
 	int err = 0;
@@ -129,6 +143,13 @@
 
 			break;
 		default:
+			/* Regular resultset, remember total field count */
+			err = network_mysqld_proto_get_lenenc_int(packet, &query->field_count);
+			if (err) {
+				g_critical("%s: COM_QUERY resultset, failed to retrieve field count",
+						G_STRLOC);
+				break;
+			}
 			query->query_status = MYSQLD_PACKET_OK;
 			/* looks like a result */
 			query->state = PARSE_COM_QUERY_FIELD;
@@ -198,6 +219,15 @@
 			}
 			break;
 		default:
+			/* means this is a column definition */
+			if (deprecate_eof) {
+				/* There is no past-fields EOF when DEPRECATE_EOF capability is set,
+				 * so we have to count fields and stop. */
+				-- query->field_count;
+				if (query->field_count == 0) {
+					query->state = PARSE_COM_QUERY_RESULT;
+				}
+			}
 			break;
 		}
 		break;
@@ -207,7 +237,7 @@
 
 		switch (status) {
 		case MYSQLD_PACKET_EOF:
-			if (packet->data->len == 9) {
+			if (packet->data->len == (deprecate_eof ? 11 : 9)) {
 				eof_packet = network_mysqld_eof_packet_new();
 
 				err = err || network_mysqld_proto_get_eof_packet(packet, eof_packet);
@@ -702,11 +732,11 @@
 		/* COM_STMT_EXECUTE result packets are basically the same as COM_QUERY ones,
 		 * the only difference is the encoding of the actual data - fields are in there, too.
 		 */
-		is_finished = network_mysqld_proto_get_com_query_result(packet, con->parse.data, TRUE);
+		is_finished = network_mysqld_proto_get_com_query_result(packet, con->parse.data, TRUE, DEPRECATE_EOF(con));
 		break;
 	case COM_PROCESS_INFO:
 	case COM_QUERY:
-		is_finished = network_mysqld_proto_get_com_query_result(packet, con->parse.data, FALSE);
+		is_finished = network_mysqld_proto_get_com_query_result(packet, con->parse.data, FALSE, DEPRECATE_EOF(con));
 		break;
 	case COM_BINLOG_DUMP:
 		/**
@@ -814,14 +844,13 @@
  * @param fields empty array where the fields shall be stored in
  *
  * @return NULL if there is no resultset
- *         pointer to the chunk after the fields (to the EOF packet)
+ *         pointer to the chunk with row data (or final EOF packet if no row data)
  */ 
-GList *network_mysqld_proto_get_fielddefs(GList *chunk, GPtrArray *fields) {
+GList *network_mysqld_proto_get_fielddefs(GList *chunk, GPtrArray *fields, guint32 capabilities) {
 	network_packet packet;
 	guint64 field_count;
 	guint i;
 	int err = 0;
-	guint32 capabilities = CLIENT_PROTOCOL_41;
 	network_mysqld_lenenc_type lenenc_type;
     
 	packet.data = chunk->data;
@@ -871,22 +900,23 @@
 		if (err) return NULL;
 	}
     
-	/* this should be EOF chunk */
-	chunk = chunk->next;
-
-	if (!chunk) return NULL;
+	/* if CLIENT_DEPRECATE_EOF is not set then next chunk  should be EOF chunk, skip it */
+	if (!(capabilities & CLIENT_DEPRECATE_EOF)) {
+		chunk = chunk->next;
+		if (!chunk) return NULL;
 
-	packet.data = chunk->data;
-	packet.offset = 0;
-	
-	err = err || network_mysqld_proto_skip_network_header(&packet);
+		packet.data = chunk->data;
+		packet.offset = 0;
+		
+		err = err || network_mysqld_proto_skip_network_header(&packet);
 
-	err = err || network_mysqld_proto_peek_lenenc_type(&packet, &lenenc_type);
-	err = err || (lenenc_type != NETWORK_MYSQLD_LENENC_TYPE_EOF);
+		err = err || network_mysqld_proto_peek_lenenc_type(&packet, &lenenc_type);
+		err = err || (lenenc_type != NETWORK_MYSQLD_LENENC_TYPE_EOF);
 
-	if (err) return NULL;
+		if (err) return NULL;
+	}
     
-	return chunk;
+	return chunk->next;
 }
 
 network_mysqld_ok_packet_t *network_mysqld_ok_packet_new() {
diff -u ./src/network-mysqld-packet.h.orig ./src/network-mysqld-packet.h
--- ./src/network-mysqld-packet.h.orig	2018-07-04 00:01:04.023501227 -0700
+++ ./src/network-mysqld-packet.h	2018-07-03 17:09:10.050935710 -0700
@@ -66,6 +66,7 @@
 	guint64 bytes;
 
 	guint8  query_status;
+	guint64 field_count;
 } network_mysqld_com_query_result_t;
 
 NETWORK_API network_mysqld_com_query_result_t *network_mysqld_com_query_result_new(void);
@@ -73,7 +74,7 @@
 NETWORK_API int network_mysqld_com_query_result_track_state(network_packet *packet, network_mysqld_com_query_result_t *udata) G_GNUC_DEPRECATED;
 NETWORK_API gboolean network_mysqld_com_query_result_is_load_data(network_mysqld_com_query_result_t *udata) G_GNUC_DEPRECATED;
 NETWORK_API gboolean network_mysqld_com_query_result_is_local_infile(network_mysqld_com_query_result_t *udata);
-NETWORK_API int network_mysqld_proto_get_com_query_result(network_packet *packet, network_mysqld_com_query_result_t *udata, gboolean use_binary_row_data);
+NETWORK_API int network_mysqld_proto_get_com_query_result(network_packet *packet, network_mysqld_com_query_result_t *udata, gboolean use_binary_row_data, gboolean deprecate_eof);
 
 /**
  * tracking the response of a COM_STMT_PREPARE command
@@ -110,7 +111,7 @@
 NETWORK_API int network_mysqld_proto_get_query_result(network_packet *packet, network_mysqld_con *con);
 NETWORK_API int network_mysqld_con_command_states_init(network_mysqld_con *con, network_packet *packet);
 
-NETWORK_API GList *network_mysqld_proto_get_fielddefs(GList *chunk, GPtrArray *fields);
+NETWORK_API GList *network_mysqld_proto_get_fielddefs(GList *chunk, GPtrArray *fields, guint32 capabilities);
 
 typedef struct {
 	guint64 affected_rows;
diff -u ./src/network-injection.h.orig ./src/network-injection.h
--- ./src/network-injection.h.orig	2018-07-04 00:02:35.319340065 -0700
+++ ./src/network-injection.h	2018-07-03 17:07:09.139509002 -0700
@@ -66,6 +66,8 @@
 	guint64      bytes;
 
 	gboolean     resultset_is_needed;       /**< flag to announce if we have to buffer the result for later processing */
+
+	guint32      capabilities;              /**< client capabilities (which should also be a subset of server capabilities) */
 } injection;
 
 /**
@@ -96,6 +98,8 @@
 	
 	guint64      rows;
 	guint64      bytes;
+
+	guint32      capabilities;              /**< client capabilities (which should also be a subset of server capabilities) */
 } proxy_resultset_t;
 
 NETWORK_API injection *injection_new(int id, GString *query);
diff -u ./src/network-injection-lua.c.orig ./src/network-injection-lua.c
--- ./src/network-injection-lua.c.orig	2018-07-03 23:50:02.393141271 -0700
+++ ./src/network-injection-lua.c	2018-07-04 10:46:45.904029210 -0700
@@ -66,6 +66,7 @@
 
 	inj = injection_new(resp_type, query);
 	inj->resultset_is_needed = FALSE;
+	inj->capabilities = 0;   /* this will be set to actual value by proxy-plugin.c */
 
 	/* check the 4th (last) param */
 	switch (luaL_opt(L, lua_istable, 4, -1)) {
@@ -341,13 +342,12 @@
     
 	if (!res->fields) return -1;
     
-	chunk = network_mysqld_proto_get_fielddefs(res->result_queue->head, res->fields);
+	chunk = network_mysqld_proto_get_fielddefs(res->result_queue->head, res->fields, res->capabilities);
     
 	/* no result-set found */
 	if (!chunk) return -1;
     
-	/* skip the end-of-fields chunk */
-	res->rows_chunk_head = chunk->next;
+	res->rows_chunk_head = chunk;
     
 	return 0;
 }
@@ -544,6 +544,7 @@
 		res->qstat = inj->qstat;
 		res->rows  = inj->rows;
 		res->bytes = inj->bytes;
+		res->capabilities = inj->capabilities;
 	
 		proxy_resultset_lua_push(L, res);
 	} else {
diff -u ./plugins/proxy/proxy-plugin.c.orig ./plugins/proxy/proxy-plugin.c
--- ./plugins/proxy/proxy-plugin.c.orig	2018-07-03 23:30:39.493528107 -0700
+++ ./plugins/proxy/proxy-plugin.c	2018-07-03 23:45:40.767828859 -0700
@@ -1562,6 +1562,10 @@
 		 * */
 
 		if (inj) {
+			/* Normally it should be enough to check only client capabilities but there are cases
+			when client sets its flag even if server does not announce that capability (see bug #91533). */
+			inj->capabilities = con->client->response->client_capabilities & 
+								con->client->response->server_capabilities;
 			if (con->parse.command == COM_QUERY || con->parse.command == COM_STMT_EXECUTE) {
 				network_mysqld_com_query_result_t *com_query = con->parse.data;
 
diff -u ./plugins/replicant/replicant-plugin.c.orig ./plugins/replicant/replicant-plugin.c
--- ./plugins/replicant/replicant-plugin.c.orig	2018-07-03 23:47:24.036925782 -0700
+++ ./plugins/replicant/replicant-plugin.c	2018-07-03 17:15:52.016003194 -0700
@@ -130,12 +130,18 @@
 	plugin_con_state *st = con->plugin_con_state;
 	GPtrArray *fields;
 	int err = 0;
+	guint32 capabilities;
+
+	/* Normally it should be enough to check only client capabilities but there are cases
+	when client sets its flag even if server does not announce that capability (see bug #91533). */
+	capabilities = con->client->response->client_capabilities & 
+				   con->client->response->server_capabilities;
 
 	/* scan the resultset */
 	chunk = sock->send_queue->chunks->head;
 
 	fields = network_mysqld_proto_fielddefs_new();
-	chunk = network_mysqld_proto_get_fielddefs(chunk, fields);
+	chunk = network_mysqld_proto_get_fielddefs(chunk, fields, capabilities);
 
 	/* a data row */
 	while (NULL != (chunk = chunk->next)) {
